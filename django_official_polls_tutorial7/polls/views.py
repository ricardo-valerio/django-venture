from django.http import HttpResponseRedirect
from django.shortcuts import render, get_object_or_404
from django.core.urlresolvers import reverse
from django.views import generic

from .models import Question, Choice


class IndexView(generic.ListView):
    # the ListView generic view uses a default template called
    # <app name>/<model name>_list.html;
    # we use template_name to tell ListView to use our
    # existing "polls/index.html" template.
    template_name = 'polls/index.html'
    # the autogenerated context_object_name is "question_list"
    # so we need to be explicit and change it
    context_object_name = 'latest_question_list'

    def get_queryset(self):
        """Return the last five published questions."""
        return Question.objects.order_by('-pub_date')[:5]


class DetailView(generic.DetailView):
    # Each generic view needs to know what model it will be acting upon.
    model = Question
    # By default, the DetailView generic view uses a template called
    # <app name>/<model name>_detail.html.
    # The template_name attribute is used to tell Django to use a
    # specific template name instead of the autogenerated
    template_name = 'polls/detail.html'
    # the autogenerated context_object_name is already "question"
    # but we want to be explicit
    context_object_name = 'question'


class ResultsView(generic.DetailView):
    model = Question
    template_name = 'polls/results.html'
    # the autogenerated context_object_name is already "question"
    # but we want to be explicit
    context_object_name = 'question'


def vote(request, question_id):
    question = get_object_or_404(Question, pk=question_id)
    try:
        #  request.POST values are always strings.
        #  Django also provides request.GET
        selected_choice = question.choice_set.get(pk=request.POST['choice'])
        # request.POST['choice'] will raise KeyError if choice wasnâ€™t
        # provided in POST data.
    except (KeyError, Choice.DoesNotExist):
        # Redisplay the question voting form.
        return render(request, 'polls/detail.html', {
            'question': question,
            'error_message': "You didn't select a choice.",
        })
    else:
        selected_choice.votes += 1
        selected_choice.save()
        # Always return an HttpResponseRedirect after successfully dealing
        # with POST data. This prevents data from being posted twice if a
        # user hits the Back button.
        return HttpResponseRedirect(
            reverse('polls:results', args=(question.id,)))
